// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_wrapper.proto

#include "messages_robocup_ssl_wrapper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_2eproto;
class SSL_WrapperPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_WrapperPacket> _instance;
} _SSL_WrapperPacket_default_instance_;
static void InitDefaultsSSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_WrapperPacket_default_instance_;
    new (ptr) ::SSL_WrapperPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_WrapperPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto}, {
      &scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto.base,
      &scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_2eproto.base,}};

void InitDefaults_messages_5frobocup_5fssl_5fwrapper_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_5frobocup_5fssl_5fwrapper_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fwrapper_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fwrapper_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_5frobocup_5fssl_5fwrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSL_WrapperPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_WrapperPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_WrapperPacket, detection_),
  PROTOBUF_FIELD_OFFSET(::SSL_WrapperPacket, geometry_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SSL_WrapperPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SSL_WrapperPacket_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_5frobocup_5fssl_5fwrapper_2eproto = {
  {}, AddDescriptors_messages_5frobocup_5fssl_5fwrapper_2eproto, "messages_robocup_ssl_wrapper.proto", schemas,
  file_default_instances, TableStruct_messages_5frobocup_5fssl_5fwrapper_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fwrapper_2eproto, 1, file_level_enum_descriptors_messages_5frobocup_5fssl_5fwrapper_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fwrapper_2eproto,
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fwrapper_2eproto[] =
  "\n\"messages_robocup_ssl_wrapper.proto\032$me"
  "ssages_robocup_ssl_detection.proto\032#mess"
  "ages_robocup_ssl_geometry.proto\"`\n\021SSL_W"
  "rapperPacket\022&\n\tdetection\030\001 \001(\0132\023.SSL_De"
  "tectionFrame\022#\n\010geometry\030\002 \001(\0132\021.SSL_Geo"
  "metryData"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fwrapper_2eproto = {
  false, InitDefaults_messages_5frobocup_5fssl_5fwrapper_2eproto, 
  descriptor_table_protodef_messages_5frobocup_5fssl_5fwrapper_2eproto,
  "messages_robocup_ssl_wrapper.proto", &assign_descriptors_table_messages_5frobocup_5fssl_5fwrapper_2eproto, 209,
};

void AddDescriptors_messages_5frobocup_5fssl_5fwrapper_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_messages_5frobocup_5fssl_5fdetection_2eproto,
    ::AddDescriptors_messages_5frobocup_5fssl_5fgeometry_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fwrapper_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5frobocup_5fssl_5fwrapper_2eproto = []() { AddDescriptors_messages_5frobocup_5fssl_5fwrapper_2eproto(); return true; }();

// ===================================================================

void SSL_WrapperPacket::InitAsDefaultInstance() {
  ::_SSL_WrapperPacket_default_instance_._instance.get_mutable()->detection_ = const_cast< ::SSL_DetectionFrame*>(
      ::SSL_DetectionFrame::internal_default_instance());
  ::_SSL_WrapperPacket_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::SSL_GeometryData*>(
      ::SSL_GeometryData::internal_default_instance());
}
class SSL_WrapperPacket::HasBitSetters {
 public:
  static const ::SSL_DetectionFrame& detection(const SSL_WrapperPacket* msg);
  static void set_has_detection(SSL_WrapperPacket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::SSL_GeometryData& geometry(const SSL_WrapperPacket* msg);
  static void set_has_geometry(SSL_WrapperPacket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::SSL_DetectionFrame&
SSL_WrapperPacket::HasBitSetters::detection(const SSL_WrapperPacket* msg) {
  return *msg->detection_;
}
const ::SSL_GeometryData&
SSL_WrapperPacket::HasBitSetters::geometry(const SSL_WrapperPacket* msg) {
  return *msg->geometry_;
}
void SSL_WrapperPacket::clear_detection() {
  if (detection_ != nullptr) detection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_WrapperPacket::clear_geometry() {
  if (geometry_ != nullptr) geometry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_WrapperPacket::kDetectionFieldNumber;
const int SSL_WrapperPacket::kGeometryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_WrapperPacket::SSL_WrapperPacket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_WrapperPacket)
}
SSL_WrapperPacket::SSL_WrapperPacket(const SSL_WrapperPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detection()) {
    detection_ = new ::SSL_DetectionFrame(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  if (from.has_geometry()) {
    geometry_ = new ::SSL_GeometryData(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_WrapperPacket)
}

void SSL_WrapperPacket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto.base);
  ::memset(&detection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometry_) -
      reinterpret_cast<char*>(&detection_)) + sizeof(geometry_));
}

SSL_WrapperPacket::~SSL_WrapperPacket() {
  // @@protoc_insertion_point(destructor:SSL_WrapperPacket)
  SharedDtor();
}

void SSL_WrapperPacket::SharedDtor() {
  if (this != internal_default_instance()) delete detection_;
  if (this != internal_default_instance()) delete geometry_;
}

void SSL_WrapperPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_WrapperPacket& SSL_WrapperPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto.base);
  return *internal_default_instance();
}


void SSL_WrapperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_WrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(detection_ != nullptr);
      detection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(geometry_ != nullptr);
      geometry_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSL_WrapperPacket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SSL_WrapperPacket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .SSL_DetectionFrame detection = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SSL_DetectionFrame::_InternalParse;
        object = msg->mutable_detection();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .SSL_GeometryData geometry = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SSL_GeometryData::_InternalParse;
        object = msg->mutable_geometry();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSL_WrapperPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_WrapperPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSL_DetectionFrame detection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SSL_GeometryData geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_WrapperPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_WrapperPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSL_WrapperPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_WrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_DetectionFrame detection = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::detection(this), output);
  }

  // optional .SSL_GeometryData geometry = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::geometry(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_WrapperPacket)
}

::google::protobuf::uint8* SSL_WrapperPacket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_WrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_DetectionFrame detection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::detection(this), target);
  }

  // optional .SSL_GeometryData geometry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::geometry(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_WrapperPacket)
  return target;
}

size_t SSL_WrapperPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_WrapperPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SSL_DetectionFrame detection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_);
    }

    // optional .SSL_GeometryData geometry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_WrapperPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_WrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_WrapperPacket* source =
      ::google::protobuf::DynamicCastToGenerated<SSL_WrapperPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_WrapperPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_WrapperPacket)
    MergeFrom(*source);
  }
}

void SSL_WrapperPacket::MergeFrom(const SSL_WrapperPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_WrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_detection()->::SSL_DetectionFrame::MergeFrom(from.detection());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_geometry()->::SSL_GeometryData::MergeFrom(from.geometry());
    }
  }
}

void SSL_WrapperPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_WrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_WrapperPacket::CopyFrom(const SSL_WrapperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_WrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_WrapperPacket::IsInitialized() const {
  if (has_detection()) {
    if (!this->detection_->IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  return true;
}

void SSL_WrapperPacket::Swap(SSL_WrapperPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_WrapperPacket::InternalSwap(SSL_WrapperPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(detection_, other->detection_);
  swap(geometry_, other->geometry_);
}

::google::protobuf::Metadata SSL_WrapperPacket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_5frobocup_5fssl_5fwrapper_2eproto);
  return ::file_level_metadata_messages_5frobocup_5fssl_5fwrapper_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::SSL_WrapperPacket* Arena::CreateMaybeMessage< ::SSL_WrapperPacket >(Arena* arena) {
  return Arena::CreateInternal< ::SSL_WrapperPacket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
