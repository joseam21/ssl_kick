// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry_legacy.proto

#include "messages_robocup_ssl_geometry_legacy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_GeometryCameraCalibration_messages_5frobocup_5fssl_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto;
namespace RoboCup2014Legacy {
namespace Geometry {
class SSL_GeometryFieldSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize> _instance;
} _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData> _instance;
} _SSL_GeometryData_default_instance_;
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
static void InitDefaultsSSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto}, {}};

static void InitDefaultsSSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto}, {
      &scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base,
      &scc_info_SSL_GeometryCameraCalibration_messages_5frobocup_5fssl_5fgeometry_2eproto.base,}};

void InitDefaults_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, line_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_length_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, boundary_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, referee_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_depth_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_wall_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, center_circle_radius_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_radius_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_stretch_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, free_kick_from_defense_dist_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_spot_from_field_line_dist_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_line_from_spot_dist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, field_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, calib_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize)},
  { 33, 40, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = {
  {}, AddDescriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, "messages_robocup_ssl_geometry_legacy.proto", schemas,
  file_default_instances, TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, 2, file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto,
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[] =
  "\n*messages_robocup_ssl_geometry_legacy.p"
  "roto\022\032RoboCup2014Legacy.Geometry\032#messag"
  "es_robocup_ssl_geometry.proto\"\212\003\n\025SSL_Ge"
  "ometryFieldSize\022\022\n\nline_width\030\001 \002(\005\022\024\n\014f"
  "ield_length\030\002 \002(\005\022\023\n\013field_width\030\003 \002(\005\022\026"
  "\n\016boundary_width\030\004 \002(\005\022\025\n\rreferee_width\030"
  "\005 \002(\005\022\022\n\ngoal_width\030\006 \002(\005\022\022\n\ngoal_depth\030"
  "\007 \002(\005\022\027\n\017goal_wall_width\030\010 \002(\005\022\034\n\024center"
  "_circle_radius\030\t \002(\005\022\026\n\016defense_radius\030\n"
  " \002(\005\022\027\n\017defense_stretch\030\013 \002(\005\022#\n\033free_ki"
  "ck_from_defense_dist\030\014 \002(\005\022)\n!penalty_sp"
  "ot_from_field_line_dist\030\r \002(\005\022#\n\033penalty"
  "_line_from_spot_dist\030\016 \002(\005\"\203\001\n\020SSL_Geome"
  "tryData\022@\n\005field\030\001 \002(\01321.RoboCup2014Lega"
  "cy.Geometry.SSL_GeometryFieldSize\022-\n\005cal"
  "ib\030\002 \003(\0132\036.SSL_GeometryCameraCalibration"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = {
  false, InitDefaults_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, 
  descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto,
  "messages_robocup_ssl_geometry_legacy.proto", &assign_descriptors_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, 640,
};

void AddDescriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_messages_5frobocup_5fssl_5fgeometry_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = []() { AddDescriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto(); return true; }();
namespace RoboCup2014Legacy {
namespace Geometry {

// ===================================================================

void SSL_GeometryFieldSize::InitAsDefaultInstance() {
}
class SSL_GeometryFieldSize::HasBitSetters {
 public:
  static void set_has_line_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_field_length(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_field_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_boundary_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_referee_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_goal_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_goal_depth(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_goal_wall_width(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_center_circle_radius(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_defense_radius(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_defense_stretch(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_free_kick_from_defense_dist(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_penalty_spot_from_field_line_dist(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_penalty_line_from_spot_dist(SSL_GeometryFieldSize* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kLineWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kRefereeWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWallWidthFieldNumber;
const int SSL_GeometryFieldSize::kCenterCircleRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseStretchFieldNumber;
const int SSL_GeometryFieldSize::kFreeKickFromDefenseDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltySpotFromFieldLineDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyLineFromSpotDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_width_, &from.line_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
    reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  ::memset(&line_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
      reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  return *internal_default_instance();
}


void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&line_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_wall_width_) -
        reinterpret_cast<char*>(&line_width_)) + sizeof(goal_wall_width_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&center_circle_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
        reinterpret_cast<char*>(&center_circle_radius_)) + sizeof(penalty_line_from_spot_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSL_GeometryFieldSize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SSL_GeometryFieldSize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 line_width = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_line_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 field_length = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_field_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 field_width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_field_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 boundary_width = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_boundary_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 referee_width = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_referee_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 goal_width = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_goal_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 goal_depth = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_goal_depth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 goal_wall_width = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_goal_wall_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 center_circle_radius = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_center_circle_radius(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 defense_radius = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_defense_radius(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 defense_stretch = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_defense_stretch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 free_kick_from_defense_dist = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_free_kick_from_defense_dist(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_penalty_spot_from_field_line_dist(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 penalty_line_from_spot_dist = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_penalty_line_from_spot_dist(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 line_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_line_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_field_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_field_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_boundary_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 referee_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_referee_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referee_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_goal_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_goal_depth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_wall_width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_goal_wall_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_wall_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 center_circle_radius = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_center_circle_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_circle_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_radius = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_defense_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_stretch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_defense_stretch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_stretch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 free_kick_from_defense_dist = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_free_kick_from_defense_dist(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_kick_from_defense_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_penalty_spot_from_field_line_dist(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_spot_from_field_line_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_line_from_spot_dist = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_penalty_line_from_spot_dist(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_line_from_spot_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 line_width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_width(), output);
  }

  // required int32 field_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_length(), output);
  }

  // required int32 field_width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->field_width(), output);
  }

  // required int32 boundary_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boundary_width(), output);
  }

  // required int32 referee_width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->referee_width(), output);
  }

  // required int32 goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goal_width(), output);
  }

  // required int32 goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goal_depth(), output);
  }

  // required int32 goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_wall_width(), output);
  }

  // required int32 center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->center_circle_radius(), output);
  }

  // required int32 defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->defense_radius(), output);
  }

  // required int32 defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defense_stretch(), output);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->free_kick_from_defense_dist(), output);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->penalty_spot_from_field_line_dist(), output);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->penalty_line_from_spot_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 line_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_width(), target);
  }

  // required int32 field_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_length(), target);
  }

  // required int32 field_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->field_width(), target);
  }

  // required int32 boundary_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boundary_width(), target);
  }

  // required int32 referee_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->referee_width(), target);
  }

  // required int32 goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goal_width(), target);
  }

  // required int32 goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goal_depth(), target);
  }

  // required int32 goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_wall_width(), target);
  }

  // required int32 center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->center_circle_radius(), target);
  }

  // required int32 defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->defense_radius(), target);
  }

  // required int32 defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defense_stretch(), target);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->free_kick_from_defense_dist(), target);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->penalty_spot_from_field_line_dist(), target);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->penalty_line_from_spot_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (has_line_width()) {
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());
  }

  if (has_field_length()) {
    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  if (has_referee_width()) {
    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_goal_wall_width()) {
    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());
  }

  if (has_center_circle_radius()) {
    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());
  }

  if (has_defense_radius()) {
    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());
  }

  if (has_defense_stretch()) {
    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());
  }

  if (has_free_kick_from_defense_dist()) {
    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());
  }

  if (has_penalty_spot_from_field_line_dist()) {
    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());
  }

  if (has_penalty_line_from_spot_dist()) {
    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());

    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());

    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());

    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());

    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());

    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());

    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());

    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());

    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::DynamicCastToGenerated<SSL_GeometryFieldSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      line_width_ = from.line_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_length_ = from.field_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      referee_width_ = from.referee_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      goal_wall_width_ = from.goal_wall_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      center_circle_radius_ = from.center_circle_radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      defense_radius_ = from.defense_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      defense_stretch_ = from.defense_stretch_;
    }
    if (cached_has_bits & 0x00000800u) {
      free_kick_from_defense_dist_ = from.free_kick_from_defense_dist_;
    }
    if (cached_has_bits & 0x00001000u) {
      penalty_spot_from_field_line_dist_ = from.penalty_spot_from_field_line_dist_;
    }
    if (cached_has_bits & 0x00002000u) {
      penalty_line_from_spot_dist_ = from.penalty_line_from_spot_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(line_width_, other->line_width_);
  swap(field_length_, other->field_length_);
  swap(field_width_, other->field_width_);
  swap(boundary_width_, other->boundary_width_);
  swap(referee_width_, other->referee_width_);
  swap(goal_width_, other->goal_width_);
  swap(goal_depth_, other->goal_depth_);
  swap(goal_wall_width_, other->goal_wall_width_);
  swap(center_circle_radius_, other->center_circle_radius_);
  swap(defense_radius_, other->defense_radius_);
  swap(defense_stretch_, other->defense_stretch_);
  swap(free_kick_from_defense_dist_, other->free_kick_from_defense_dist_);
  swap(penalty_spot_from_field_line_dist_, other->penalty_spot_from_field_line_dist_);
  swap(penalty_line_from_spot_dist_, other->penalty_line_from_spot_dist_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto);
  return ::file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SSL_GeometryData::InitAsDefaultInstance() {
  ::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_._instance.get_mutable()->field_ = const_cast< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize*>(
      ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::internal_default_instance());
}
class SSL_GeometryData::HasBitSetters {
 public:
  static const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& field(const SSL_GeometryData* msg);
  static void set_has_field(SSL_GeometryData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize&
SSL_GeometryData::HasBitSetters::field(const SSL_GeometryData* msg) {
  return *msg->field_;
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  field_ = nullptr;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void SSL_GeometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_GeometryData& SSL_GeometryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  return *internal_default_instance();
}


void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calib_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field_ != nullptr);
    field_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SSL_GeometryData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SSL_GeometryData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::SSL_GeometryCameraCalibration::_InternalParse;
          object = msg->add_calib();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->calib(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->calib(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->calib_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calib(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::DynamicCastToGenerated<SSL_GeometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  if (from.has_field()) {
    mutable_field()->::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::MergeFrom(from.field());
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&calib_)->InternalSwap(CastToBase(&other->calib_));
  swap(field_, other->field_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto);
  return ::file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* Arena::CreateMaybeMessage< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize >(Arena* arena) {
  return Arena::CreateInternal< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCup2014Legacy::Geometry::SSL_GeometryData* Arena::CreateMaybeMessage< ::RoboCup2014Legacy::Geometry::SSL_GeometryData >(Arena* arena) {
  return Arena::CreateInternal< ::RoboCup2014Legacy::Geometry::SSL_GeometryData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
